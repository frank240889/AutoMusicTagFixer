/**
 * The first line in the build configuration applies the Android plugin for
 * Gradle to this build and makes the android {} block available to specify
 * Android-specific build options.
 */

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'

/**
 * The android {} block is where you configure all your Android-specific
 * build options.
 */

android {
    /**
     * compileSdkVersion specifies the Android API level Gradle should use to
     * compile your app. This means your app can use the API features included in
     * this API level and lower.
     *
     * buildToolsVersion specifies the version of the SDK build tools, command-line
     * utilities, and compiler that Gradle should use to build your app. You need to
     * download the build tools using the SDK Manager.
     */
    lintOptions { checkReleaseBuilds true }
    compileSdkVersion 30
    buildToolsVersion '30.0.3'
    /**
     * The defaultConfig {} block encapsulates default settings and entries for all
     * build variants, and can override some attributes in main/AndroidManifest.xml
     * dynamically from the build system. You can configure product flavors to override
     * these values for different versions of your app.
     */

    defaultConfig {
        /**
         * applicationId uniquely identifies the package for publishing.
         * However, your source code should still reference the package name
         * defined by the package attribute in the main/AndroidManifest.xml file.
         */
        applicationId 'mx.dev.franco.automusictagfixer'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 18
        versionName "2.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        def documentsAuthorityValue = applicationId + ".documents"

        manifestPlaceholders = [documentsAuthority: documentsAuthorityValue]
        buildConfigField "String", "DOCUMENTS_AUTHORITY", "\"${documentsAuthorityValue}\""
        buildConfigField "String", "GNSDK_API_KEY", gnsdkApiKey
        buildConfigField "String", "GNSDK_CLIENT_ID", gnsdkClientId
        buildConfigField "String", "GNSDK_CLIENT_TAG", gnsdkClientTag
        buildConfigField "String", "APP_STRING", appString

        vectorDrawables.useSupportLibrary = true
    }
    /**
     * The buildTypes {} block is where you can configure multiple build types.
     * By default, the build system defines two build types: debug and release. The
     * debug build type is not explicitly shown in the default build configuration,
     * but it includes debugging tools and is signed with the debug key. The release
     * build type applies Proguard settings and is not signed by default.
     */
    buildTypes {
        /**
         * By default, Android Studio configures the release build type to enable code
         * shrinking, using minifyEnabled, and specifies the Proguard settings file.
         */
        release {
            //consumerProguardFiles 'proguard-project.txt'
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false

        }
    }

    /**
     * The productFlavors {} block is where you can configure multiple product
     * flavors. This allows you to create different versions of your app that can
     * override defaultConfig {} with their own settings. Product flavors are
     * optional, and the build system does not create them by default. This example
     * creates a free and paid product flavor. Each product flavor then specifies
     * its own application ID, so that they can exist on the Google Play Store, or
     * an Android device, simultaneously.
     */
    productFlavors {
    }
    /**
     * The splits {} block is where you can configure different APK builds that
     * each contain only code and resources for a supported screen density or
     * ABI. You'll also need to configure your build so that each APK has a
     * different versionCode.
     */
    splits {
        abi {
            enable true
            reset()
            include 'armeabi', 'armeabi-v7a', 'arm64-v8a'
            universalApk true
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }

    dataBinding {
        enabled = true
    }

    viewBinding {
        enabled = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

/**
 * The dependencies {} block in the module-level build configuration file
 * only specifies dependencies required to build the module itself.
 */
dependencies {

    implementation fileTree(include: ['*.jar'], dir: 'libs')

    //implementation files('libs/gnsdk.jar')
    //implementation files('libs/gnsdk_helpers.jar')
    implementation files('libs/jaudiotagger-2.2.4.jar')

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'

    // Room components
    implementation 'androidx.room:room-runtime:2.3.0'
    implementation 'androidx.preference:preference-ktx:1.1.1'
    kapt 'androidx.room:room-compiler:2.3.0'
    androidTestImplementation 'androidx.room:room-testing:2.3.0'

    // Lifecycle components
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-common-java8:2.3.1'

    implementation 'com.google.android.material:material:1.3.0'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    // Declare the dependencies for the Crashlytics and Analytics libraries
    // When NOT using the BoM, you must specify versions in Firebase library dependencies
    implementation 'com.google.firebase:firebase-crashlytics:18.0.0'
    implementation 'com.google.firebase:firebase-analytics:19.0.0'

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'
    releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.3'
    //the core iconcis library (without any widgets)
    implementation "com.mikepenz:iconics-core:3.0.3@aar"
    //this adds all ui view widgets (IconicsButton, IconicsImageView, ...)
    implementation "com.mikepenz:iconics-views:3.0.3@aar"
    implementation 'com.mikepenz:google-material-typeface:3.0.1.2.original@aar'


    api 'com.google.dagger:dagger:2.35.1'
    api 'com.google.dagger:dagger-android:2.35.1'
    api 'com.google.dagger:dagger-android-support:2.35.1'

    annotationProcessor 'com.google.dagger:dagger-compiler:2.35.1'
    kapt 'com.google.dagger:dagger-compiler:2.35.1'

    annotationProcessor 'com.google.dagger:dagger-android-processor:2.35.1'
    kapt 'com.google.dagger:dagger-android-processor:2.35.1'

    compileOnly 'javax.annotation:jsr250-api:1.0'
    implementation 'javax.inject:javax.inject:1'

    implementation 'com.facebook.stetho:stetho:1.6.0'
    implementation 'io.github.dreierf:material-intro-screen:0.0.6'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'


    implementation 'androidx.annotation:annotation:1.2.0'
    // Core library
    androidTestImplementation 'androidx.test:core:1.3.0'
    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation "org.robolectric:robolectric:4.2.1"
    //noinspection GradleCompatible
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.android.billingclient:billing:3.0.3'
    implementation "androidx.core:core-ktx:1.3.2"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.5.0"
}
repositories {
    mavenCentral()
}
